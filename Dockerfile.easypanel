# Ultra-Minimal Single Container for EasyPanel with Supabase
# Uses supervisord to run multiple services in one container

FROM node:22-alpine AS base

# Install minimal build dependencies (no PostgreSQL client needed)
RUN apk add --no-cache \
    git \
    sqlite \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# Copy package files for dependency installation
COPY package*.json ./

# Install dependencies with aggressive optimization
RUN npm ci --only=production --ignore-scripts && \
    npm cache clean --force && \
    # Remove unnecessary files for smaller image
    find node_modules -name "*.md" -delete && \
    find node_modules -name "*.txt" -delete && \
    find node_modules -name "test" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find node_modules -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find node_modules -name "*.map" -delete && \
    find node_modules -name "*.ts" -delete

# Ultra-minimal production stage with supervisord
FROM node:22-alpine AS production

# Install only essential runtime dependencies (no PostgreSQL client)
RUN apk add --no-cache \
    supervisor \
    curl \
    bash \
    sqlite \
    tzdata \
    dumb-init \
    && rm -rf /var/cache/apk/* /tmp/*

WORKDIR /app

# Create app user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S botuser -u 1001

# Copy optimized dependencies
COPY --from=base /app/node_modules ./node_modules

# Copy application code (selective copying)
COPY src/ ./src/
COPY scripts/ ./scripts/
COPY package.json ./
COPY .env.example ./

# Copy Docker configuration files
COPY docker/supervisord.conf /etc/supervisord.conf
COPY docker/healthcheck.sh /usr/local/bin/healthcheck.sh
COPY docker/start-easypanel.sh /usr/local/bin/start-easypanel.sh
COPY docker/supervisor-status.sh /usr/local/bin/supervisor-status.sh

# Create directories with proper permissions
RUN mkdir -p data data/sessions logs backups tmp /var/log/supervisor && \
    chown -R botuser:nodejs data data/sessions logs backups tmp && \
    chmod 755 data data/sessions logs backups tmp

# Make scripts executable
RUN find scripts -name "*.sh" -exec chmod +x {} \; 2>/dev/null || true && \
    chmod +x /usr/local/bin/healthcheck.sh && \
    chmod +x /usr/local/bin/start-easypanel.sh && \
    chmod +x /usr/local/bin/supervisor-status.sh

# Create .env from environment variables
RUN node scripts/create-env.js || echo "Warning: Could not create .env file"

# Final cleanup for smaller image
RUN rm -rf /tmp/* /var/cache/apk/* && \
    find . -name "*.log" -delete 2>/dev/null || true

# Set proper ownership
RUN chown -R botuser:nodejs /app

# Health check configuration for EasyPanel
HEALTHCHECK --interval=60s --timeout=15s --start-period=120s --retries=3 \
    CMD ["/usr/local/bin/healthcheck.sh"]

# Set environment variables optimized for single container
ENV NODE_ENV=production \
    LOG_LEVEL=info \
    ANTI_SPAM_EMERGENCY_BRAKE=true \
    ENABLE_AI_FEATURES=true \
    PORT=3000 \
    # Alpine-specific memory optimizations
    NODE_OPTIONS="--max-old-space-size=384 --gc-interval=100" \
    # Reduce npm memory usage
    NPM_CONFIG_FUND=false \
    NPM_CONFIG_AUDIT=false \
    # Timezone
    TZ=Asia/Jakarta

# Expose port
EXPOSE 3000

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start with EasyPanel-optimized script
CMD ["/usr/local/bin/start-easypanel.sh"]

# Labels for EasyPanel identification
LABEL maintainer="WhatsApp Financial Bot for EasyPanel" \
      version="1.0.0" \
      description="Single container with supervisord for multiple services" \
      deployment="easypanel" \
      base="alpine" \
      services="bot,monitor,cleanup,health,logs"